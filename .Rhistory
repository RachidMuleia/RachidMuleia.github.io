table(prisioneiro_df1$CONHECIMENTO_SERO_ESTADO,prisioneiro_df1$POS2 ,useNA = 'ifany')
table(prisioneiro_df1$HIVTX,prisioneiro_df1$POS2 ,useNA = 'ifany')
prisioneiro_df1$TOMOU_TARV<-rep(NA, dim(prisioneiro_df1)[1])
prisioneiro_df1$TOMOU_TARV[prisioneiro_df1$CONHECIMENTO_SERO_ESTADO=='1_CONHECE_SEROESTADO' & prisioneiro_df1$POS2=='Sim']<-'Sim'
prisioneiro_df1$TOMOU_TARV[prisioneiro_df1$CONHECIMENTO_SERO_ESTADO=='1_CONHECE_SEROESTADO' & prisioneiro_df1$POS2=='Nao']<-'Nao'
prisioneiro_df1$TOMOU_TARV[prisioneiro_df1$CONHECIMENTO_SERO_ESTADO=='1_CONHECE_SEROESTADO' & is.na(prisioneiro_df1$POS2)]<-'Nao'
table(prisioneiro_df1$CONHECIMENTO_SERO_ESTADO,prisioneiro_df1$POS3 ,useNA = 'ifany')
prisioneiro_df1$TOMA_TARV<-rep(NA, dim(prisioneiro_df1)[1])
prisioneiro_df1$TOMA_TARV[prisioneiro_df1$CONHECIMENTO_SERO_ESTADO=='1_CONHECE_SEROESTADO' & prisioneiro_df1$POS3=='Sim']<-'Sim'
prisioneiro_df1$TOMA_TARV[prisioneiro_df1$CONHECIMENTO_SERO_ESTADO=='1_CONHECE_SEROESTADO' & prisioneiro_df1$POS3=='Nao']<-'Nao'
prisioneiro_df1$TOMA_TARV[prisioneiro_df1$CONHECIMENTO_SERO_ESTADO=='1_CONHECE_SEROESTADO' & is.na(prisioneiro_df1$POS3)]<-'Nao'
prisioneiro_df1$TOMA_TARV[prisioneiro_df1$HIV_STATUS=='positivo' & is.na(prisioneiro_df1$TOMA_TARV)]<-'Nao'
table(prisioneiro_df1$TOMA_TARV)
table(prisioneiro_df1$POS3)
prisioneiro_cv<-merge(prisioneiro_df1, carga_viral_df,by.x='CODPARTICIPANTE', by.y='codparticipante', all.x=TRUE)
table(prisioneiro_cv$CONHECIMENTO_SERO_ESTADO,prisioneiro_cv$cv_resul,useNA = 'ifany')
prisioneiro_cv$VIRAL_LOAD<-rep(NA, dim(prisioneiro_cv)[1])
prisioneiro_cv$VIRAL_LOAD[prisioneiro_cv$cv_absoluto<1000 & prisioneiro_cv$CONHECIMENTO_SERO_ESTADO=='1_CONHECE_SEROESTADO']<-'1_SUPPRESSED'
prisioneiro_cv$VIRAL_LOAD[prisioneiro_cv$cv_absoluto>=1000 & prisioneiro_cv$CONHECIMENTO_SERO_ESTADO=='1_CONHECE_SEROESTADO']<-'2_NOT_SUPPRESSED'
prisioneiro_cv$VIRAL_LOAD[prisioneiro_cv$HIV_STATUS=='positivo'& is.na(prisioneiro_cv$VIRAL_LOAD)]<-'2_NOT_SUPPRESSED'
table(prisioneiro_cv$VIRAL_LOAD)
prisioneiro_cv$VIRAL_LOAD[prisioneiro_cv$cv_resul=='indetectavel' & prisioneiro_cv$CONHECIMENTO_SERO_ESTADO=='1_CONHECE_SEROESTADO']<-'1_SUPPRESSED'
prisioneiro_cv$VIRAL_LOAD[prisioneiro_cv$cv_resul=='detectavel' & prisioneiro_cv$CONHECIMENTO_SERO_ESTADO=='1_CONHECE_SEROESTADO']<-'2_NOT_SUPPRESSED'
prisioneiro_cv$VIRAL_LOAD[is.na(prisioneiro_cv$cv_resul) & prisioneiro_cv$CONHECIMENTO_SERO_ESTADO=='1_CONHECE_SEROESTADO']<-'2_NOT_SUPPRESSED'
table(prisioneiro_cv$VIRAL_LOAD)
# REMOVER DUPLICADOS
prisioneiro_cv1<-prisioneiro_cv[!duplicated(prisioneiro_cv),]
prisioneiro_cv2<-prisioneiro_cv[duplicated(prisioneiro_cv$CODPARTICIPANTE),]
pr_strat_cl_viral<-svydesign(id=~SRVYEP, strata=~PROV, data=prisioneiro_cv, weights =~Pweight)
#variavel_casc<-c('CONHECIMENTO_SERO_ESTADO', 'LIGADO_CUIDADO', 'TOMOU_TARV', 'TOMA_TARV', 'VIRAL_LOAD')
variavel_casc1<-c('CONHECIMENTO_SERO_ESTADO',   'TOMA_TARV', 'VIRAL_LOAD')
# VERIFICAR DUPLICADOS NA BASE DE DADOS DE CARGA VIRAL
reclusa_cv<-merge(reclusa_df1, carga_viral_df,by.x='CODPARTICIPANTE', by.y='codparticipante', all.x=TRUE)
data1 <- prisioneiro_cv[,c('SRVYEP', 'PROV','CONHECIMENTO_SERO_ESTADO', 'cv_resul', 'TOMA_TARV', 'Pweight', 'HIV_STATUS', 'VIRAL_LOAD', 'SIFILIS_RESULT')]
data2 <- reclusa_cv[, c('SRVYEP', 'SRVYPROV','CONHECIMENTO_SERO_ESTADO', 'cv_resul', 'TOMA_TARV', 'pweight', 'HIV_STATUS', 'VIRAL_LOAD', 'SIFILIS_RESULT')]
data1 <- prisioneiro_cv[,c('SRVYEP', 'PROV','CONHECIMENTO_SERO_ESTADO', 'cv_resul', 'TOMA_TARV', 'Pweight', 'HIV_STATUS',  'SIFILIS_RESULT')]
data2 <- reclusa_cv[, c('SRVYEP', 'SRVYPROV','CONHECIMENTO_SERO_ESTADO', 'cv_resul', 'TOMA_TARV', 'pweight', 'HIV_STATUS', 'SIFILIS_RESULT')]
data1 <- prisioneiro_cv[,c('SRVYEP', 'PROV','CONHECIMENTO_SERO_ESTADO', 'cv_resul', 'Pweight', 'HIV_STATUS',  'SIFILIS_RESULT')]
data2 <- reclusa_cv[, c('SRVYEP', 'SRVYPROV','CONHECIMENTO_SERO_ESTADO', 'cv_resul',  'pweight', 'HIV_STATUS', 'SIFILIS_RESULT')]
names(data2) <- names(data1)
cascade_data <- rbind(data1, data2)
pr_weight_cascade <- svydesign(id=~SRVYEP, data=cascade_data , weights =~Pweight)
variavel_casc1<-c('HIV_STATUS', 'SIFILIS_RESULT')
cascata <- descriptive_pri(data= cascade_data,surveydesign = pr_weight_cascade, vector_var = variavel_casc1,rd= 1)
out_path<-'C:/Users/Rachid/Dropbox/INS/Prisioneiros/BASES_DE_DADOS/TABELAS'
cascata <- descriptive_pri(data= cascade_data,surveydesign = pr_weight_cascade, vector_var = variavel_casc1,rd= 1)
export(cascata, file=paste(out_path,'PREVALENCIA_GERAL.xlsx',sep='/'))
27+14+13
library(pdftools)
setwd('C:/Users/Rachid/Dropbox/Documentos & CV')
list.files()
?pdf_combine
pdf_combine(c('Requerimento_INS_2023.pdf', 'BI_RACHID_MULEIA.pdf', 'Diploma_Doutoramento.pdf',
'Diploma_Mestrado', 'Curriculum_Vitae_RM_PT'), output = 'RACHID_CANDIDATURA_INS.pdf')
pdf_combine(c('Requerimento_INS_2023.pdf', 'BI_RACHID_MULEIA.pdf', 'Diploma_Doutoramento.pdf',
'Diploma_Mestrado.pdf', 'Curriculum_Vitae_RM_PT'), output = 'RACHID_CANDIDATURA_INS.pdf')
pdf_combine(c('Requerimento_INS_2023.pdf', 'BI_RACHID_MULEIA.pdf', 'Diploma_Doutoramento.pdf',
'Diploma_Mestrado.pdf', 'Curriculum_Vitae_RM_PT.pdf'), output = 'RACHID_CANDIDATURA_INS.pdf')
pdf_combine(c('Requerimento_INS_2023.pdf', 'BI_RACHID_MULEIA.pdf', 'Certificado_Equivalencia_Doutoramento.pdf','Diploma_Doutoramento.pdf',
'Diploma_Mestrado.pdf', 'Curriculum_Vitae_RM_PT.pdf'), output = 'RACHID_CANDIDATURA_INS.pdf')
table(prisioneiro_df1$VIOL) # JA foI COAGIDO A TER RELACOES SEXUAIS
table(prisioneiro_df1$VIOL2) # JA FOI FORCADO A TER RELACOES SEXUAIS POR UM FUNCIONARIO DO EP
table(prisioneiro_df1$VIOL4) # OBJECTO INSERIDO NO ANUS
table(prisioneiro_df1$VIOL6) # OBJECTO INSERIDO NO ANUS POR FUNCIONARIO
table(prisioneiro_df1$VIOL6) # OBJECTO INSERIDO NO ANUS POR FUNCIONARIO
table(prisioneiro_df1$VIOL4) # OBJECTO INSERIDO NO ANUS
prisioneiro_df1$VIOL_INSERT <- rep(NA, dim(prisioneiro_df)[1])
prisioneiro_df1$VIOL6C<-prisioneiro_df1$VIOL6
prisioneiro_df1$VIOL6C[prisioneiro_df1$VIOL6C=='Sim']<-'1_SIM'
prisioneiro_df1$VIOL6C[prisioneiro_df1$VIOL6C=='Nao']<-'2_NAO'
prisioneiro_df1$VIOL6C[prisioneiro_df1$VIOL6C=='Nao_sabe_ou_nao_lembra']<-NA
prisioneiro_df1$VIOL_INSERT <- rep(NA, dim(prisioneiro_df)[1])
prisioneiro_df1$VIOL_INSERT[ prisioneiro_df1$VIOL4 == 'Sim' |prisioneiro_df1$VIOL6C == '1_SIM'] <- '1_SIM'
prisioneiro_df1$VIOL_INSERT[ prisioneiro_df1$VIOL4 == 'Nao' & prisioneiro_df1$VIOL6C == '2_NAO'] <- '2_NAO'
table(prisioneiro_df1$VIOL_INSERT)
pr_strat_cl<-svydesign(id=~SRVYEP, strata=~PROV, data=prisioneiro_df1, weights =~Pweight)
')
variables_viol<-c('VIOL', 'VIOL4', 'VIOL6C', 'VIOL_INSERT')
viol_agr<-descriptive_pri(data=prisioneiro_df1,surveydesign=pr_strat_cl, vector_var = variables_viol, rd=3)
out_path<-'C:/Users/Rachid/Dropbox/INS/Prisioneiros/BASES_DE_DADOS/TABELAS'
export(viol_agr, file=paste(out_path,'VIOLENCIA.xlsx',sep='/'))
24.4/9.3
24.4/9.4
25.4/9.4
tarv_pop_all
tarv_pop
unique_df
variaveis_tarv <- c('TESTE_HIV', 'TESTAGEM_ULTIMO_12MESES','RESULTADO_TEST_HIV', 'HIV_CONHECIDO',
'TRATAMENTO_ANITIRETROVIRAL','TOMA_ARVS','TESTE_CV',
'TIPO_RESULTADO_TESTE_CV', 'SUPRESSA_VIRAL')
tarv_pop <-lapply(list_pop, function(x){
descriptive_kp(data = x, variables = variaveis_tarv)
})
list_pop  <- list(unique_df[unique_df$MTS ==1,], unique_df[unique_df$HSH ==1,],
unique_df[unique_df$PID ==1 & unique_df$SEXO_PESSOA == 'masculino',],
unique_df[unique_df$PID ==1 & unique_df$SEXO_PESSOA == 'femenino',],
unique_df[unique_df$HTG ==1,], unique_df[unique_df$MTG ==1,])
variaveis_tarv <- c('TESTE_HIV', 'TESTAGEM_ULTIMO_12MESES','RESULTADO_TEST_HIV', 'HIV_CONHECIDO',
'TRATAMENTO_ANITIRETROVIRAL','TOMA_ARVS','TESTE_CV',
'TIPO_RESULTADO_TESTE_CV', 'SUPRESSA_VIRAL')
tarv_pop <-lapply(list_pop, function(x){
descriptive_kp(data = x, variables = variaveis_tarv)
})
## TESTAGEM DE HIV
table(unique_df$TESTE_HIV)
table(unique_df$RESULTADO_TEST_HIV,useNA = 'always')
table(unique_df$ULTIMO_TESTE_HIV, useNA = 'always')
unique_df$HIV_CONHECIDO <- rep(NA, dim(unique_df)[1])
unique_df$HIV_CONHECIDO[unique_df$ULTIMO_TESTE_HIV %in% c('ultimos_6_meses', '7_12meses') &
unique_df$RESULTADO_TEST_HIV %in% c('nao_claro', 'negativo')] <- '1_CONHECIDO'
unique_df$HIV_CONHECIDO[unique_df$RESULTADO_TEST_HIV == 'positivo'] <- '1_CONHECIDO'
unique_df$HIV_CONHECIDO[unique_df$RESULTADO_TEST_HIV != 'positivo' &
!(unique_df$ULTIMO_TESTE_HIV %in% c('ultimos_6_meses', '7_12meses'))]<- '2_NAO_CONHECIDO'
unique_df$TESTAGEM_ULTIMO_12MESES <- rep(NA, dim(unique_df)[1])
unique_df$TESTAGEM_ULTIMO_12MESES[unique_df$ULTIMO_TESTE_HIV %in% c('ultimos_6_meses', '7_12meses')] <- '1_SIM'
unique_df$TESTAGEM_ULTIMO_12MESES[!(unique_df$ULTIMO_TESTE_HIV %in% c('ultimos_6_meses', '7_12meses')) & unique_df$TESTE_HIV == 'sim'] <- '2_NAO'
table(unique_df$HIV_CONHECIDO, useNA = 'always')
var_testagem <- c('TESTE_HIV', 'TESTAGEM_ULTIMO_12MESES','RESULTADO_TEST_HIV', 'HIV_CONHECIDO')
descriptive_kp(data = unique_df[unique_df$MTS == 1, ], variables = var_testagem)
## TARV
table(unique_df$TRATAMENTO_ANITIRETROVIRAL)
table(unique_df$TOMA_ARVS, useNA = 'always')
unique_df$TESTE_CV[unique_df$TOMA_ARVS == 'nao_sabe'] <- NA
table(unique_df$TESTE_CV, useNA = 'always')
table(unique_df$TIPO_RESULTADO_TESTE_CV, useNA = 'always')
table(unique_df$RESULTADO_TESTE_CV)
unique_df$TESTE_CV[unique_df$TOMA_ARVS == 'nao_sabe'] <- NA
unique_df$TESTE_CV[unique_df$TOMA_ARVS == 'nao'] <- NA
unique_df$TIPO_RESULTADO_TESTE_CV[unique_df$RESULTADO_TESTE_CV < 1000] <- 'nao_detectavel'
unique_df$TIPO_RESULTADO_TESTE_CV[unique_df$TOMA_ARVS == 'nao_sabe'] <- NA
table(unique_df$TOMA_ARVS,unique_df$TESTE_CV,useNA = 'always')
table(unique_df$TOMA_ARVS,unique_df$TIPO_RESULTADO_TESTE_CV,useNA = 'always')
unique_df$SUPRESSA_VIRAL <- rep(NA, dim(unique_df)[1])
unique_df$SUPRESSA_VIRAL[unique_df$TIPO_RESULTADO_TESTE_CV == 'nao_detectavel' &
unique_df$TOMA_ARVS == 'sim'] <- '1_SUPREMIDO'
unique_df$SUPRESSA_VIRAL[unique_df$TIPO_RESULTADO_TESTE_CV != 'nao_detectavel' &
unique_df$TOMA_ARVS == 'sim'] <- '2_NAO_SUPREMIDO'
unique_df$SUPRESSA_VIRAL[is.na(unique_df$TIPO_RESULTADO_TESTE_CV) &
unique_df$TOMA_ARVS == 'sim'] <- '2_NAO_SUPREMIDO'
variaveis_tarv <- c('TESTE_HIV', 'TESTAGEM_ULTIMO_12MESES','RESULTADO_TEST_HIV', 'HIV_CONHECIDO',
'TRATAMENTO_ANITIRETROVIRAL','TOMA_ARVS','TESTE_CV',
'TIPO_RESULTADO_TESTE_CV', 'SUPRESSA_VIRAL')
tarv_pop <-lapply(list_pop, function(x){
descriptive_kp(data = x, variables = variaveis_tarv)
})
unique_df$HIV_CONHECIDO
variaveis_tarv <- c('TESTE_HIV', 'TESTAGEM_ULTIMO_12MESES','RESULTADO_TEST_HIV', 'HIV_CONHECIDO',
'TRATAMENTO_ANITIRETROVIRAL','TOMA_ARVS','TESTE_CV',
'TIPO_RESULTADO_TESTE_CV', 'SUPRESSA_VIRAL')
variaveis_tarv
list_pop
tarv_pop <-lapply(list_pop, function(x){
descriptive_kp(data = x, variables = variaveis_tarv)
})
descriptive_kp<-function(data, variables){
#tab_list<-list()
tab_list<-lapply(variables, function(x){t(t(table(data[,x])))})
prop_list<-lapply(tab_list, prop.table)
variavel_nam<-list()
for(i in 1:length(tab_list)){
variavel_nam[[i]]<-rep(variables[i], length(tab_list[[i]]))
}
data_table<-do.call(rbind, tab_list)
data_prop<-do.call(rbind, prop_list)
variavel_nam1<-unlist(variavel_nam)
data_var<-data.frame(var_nam=variavel_nam1,Names=rownames(data_table), EST=paste(data_table[,1], '(', round(data_prop[,1]*100,1), ')'))
return(data_var)
}
tarv_pop <-lapply(list_pop, function(x){
descriptive_kp(data = x, variables = variaveis_tarv)
})
table(unique_df$TESTE_HIV)
table(unique_df$RESULTADO_TEST_HIV,useNA = 'always')
table(unique_df$ULTIMO_TESTE_HIV, useNA = 'always')
unique_df$HIV_CONHECIDO <- rep(NA, dim(unique_df)[1])
unique_df$HIV_CONHECIDO[unique_df$ULTIMO_TESTE_HIV %in% c('ultimos_6_meses', '7_12meses') &
unique_df$RESULTADO_TEST_HIV %in% c('nao_claro', 'negativo')] <- '1_CONHECIDO'
unique_df$HIV_CONHECIDO[unique_df$RESULTADO_TEST_HIV == 'positivo'] <- '1_CONHECIDO'
unique_df$HIV_CONHECIDO[unique_df$RESULTADO_TEST_HIV != 'positivo' &
!(unique_df$ULTIMO_TESTE_HIV %in% c('ultimos_6_meses', '7_12meses'))]<- '2_NAO_CONHECIDO'
unique_df$TESTAGEM_ULTIMO_12MESES <- rep(NA, dim(unique_df)[1])
unique_df$TESTAGEM_ULTIMO_12MESES[unique_df$ULTIMO_TESTE_HIV %in% c('ultimos_6_meses', '7_12meses')] <- '1_SIM'
unique_df$TESTAGEM_ULTIMO_12MESES[!(unique_df$ULTIMO_TESTE_HIV %in% c('ultimos_6_meses', '7_12meses')) & unique_df$TESTE_HIV == 'sim'] <- '2_NAO'
table(unique_df$HIV_CONHECIDO, useNA = 'always')
table(unique_df$TRATAMENTO_ANITIRETROVIRAL)
table(unique_df$TOMA_ARVS, useNA = 'always')
unique_df$TESTE_CV[unique_df$TOMA_ARVS == 'nao_sabe'] <- NA
table(unique_df$TESTE_CV, useNA = 'always')
table(unique_df$TIPO_RESULTADO_TESTE_CV, useNA = 'always')
table(unique_df$RESULTADO_TESTE_CV)
unique_df$TESTE_CV[unique_df$TOMA_ARVS == 'nao_sabe'] <- NA
unique_df$TESTE_CV[unique_df$TOMA_ARVS == 'nao'] <- NA
unique_df$TIPO_RESULTADO_TESTE_CV[unique_df$RESULTADO_TESTE_CV < 1000] <- 'nao_detectavel'
unique_df$TIPO_RESULTADO_TESTE_CV[unique_df$TOMA_ARVS == 'nao_sabe'] <- NA
table(unique_df$TOMA_ARVS,unique_df$TESTE_CV,useNA = 'always')
table(unique_df$TOMA_ARVS,unique_df$TIPO_RESULTADO_TESTE_CV,useNA = 'always')
unique_df$SUPRESSA_VIRAL <- rep(NA, dim(unique_df)[1])
unique_df$SUPRESSA_VIRAL[unique_df$TIPO_RESULTADO_TESTE_CV == 'nao_detectavel' &
unique_df$TOMA_ARVS == 'sim'] <- '1_SUPREMIDO'
unique_df$SUPRESSA_VIRAL[unique_df$TIPO_RESULTADO_TESTE_CV != 'nao_detectavel' &
unique_df$TOMA_ARVS == 'sim'] <- '2_NAO_SUPREMIDO'
unique_df$SUPRESSA_VIRAL[is.na(unique_df$TIPO_RESULTADO_TESTE_CV) &
unique_df$TOMA_ARVS == 'sim'] <- '2_NAO_SUPREMIDO'
descriptive_kp(data = unique_df, variables = c('TRATAMENTO_ANITIRETROVIRAL','TOMA_ARVS','TESTE_CV', 'TIPO_RESULTADO_TESTE_CV', 'SUPRESSA_VIRAL'))
var_testagem <- c('TESTE_HIV', 'TESTAGEM_ULTIMO_12MESES','RESULTADO_TEST_HIV', 'HIV_CONHECIDO')
descriptive_kp(data = unique_df[unique_df$MTS == 1, ], variables = var_testagem)
tarv_pop <-lapply(list_pop, function(x){
descriptive_kp(data = x, variables = variaveis_tarv)
})
descriptive_kp(data = unique_df, variables = variaveis_tarv)
list_pop[[1]]
list_pop[[2]]
list_pop[[4]]
descriptive_kp(data = x, variables = variaveis_tarv)
descriptive_kp(data = list_pop[[1]], variables = variaveis_tarv)
descriptive_kp(data = unique_df[unique_df$MTS ==1,], variables = variaveis_tarv)
descriptive_kp(data = list_pop[[2]], variables = variaveis_tarv)
list_pop[[2]]
list_pop  <- list(unique_df[unique_df$MTS ==1,], unique_df[unique_df$HSH ==1,],
unique_df[unique_df$PID ==1 & unique_df$SEXO_PESSOA == 'masculino',],
unique_df[unique_df$PID ==1 & unique_df$SEXO_PESSOA == 'femenino',],
unique_df[unique_df$HTG ==1,], unique_df[unique_df$MTG ==1,])
tarv_pop <-lapply(list_pop, function(x){
descriptive_kp(data = x, variables = variaveis_tarv)
})
tarv_pop_all <- do.call(cbind, tarv_pop)
list_pop  <- list(unique_df[unique_df$MTS ==1,], unique_df[unique_df$HSH ==1,],
unique_df[unique_df$PID ==1 & unique_df$SEXO_PESSOA == 'masculino',],
unique_df[unique_df$PID ==1 & unique_df$SEXO_PESSOA == 'femenino',],
unique_df[unique_df$HTG ==1,], unique_df[unique_df$MTG ==1,])
tarv_pop <-lapply(list_pop, function(x){
descriptive_kp(data = x, variables = variaveis_tarv)
})
tarv_pop_all <- do.call(cbind, tarv_pop)
tarv_pop[[1]]
for(i in 1:length(variaveis_tarv)){
unique_df[, variaveis_tarv[i]] <- factor(unique_df[, variaveis_tarv[i]])
}
list_pop  <- list(unique_df[unique_df$MTS ==1,], unique_df[unique_df$HSH ==1,],
unique_df[unique_df$PID ==1 & unique_df$SEXO_PESSOA == 'masculino',],
unique_df[unique_df$PID ==1 & unique_df$SEXO_PESSOA == 'femenino',],
unique_df[unique_df$HTG ==1,], unique_df[unique_df$MTG ==1,])
tarv_pop <-lapply(list_pop, function(x){
descriptive_kp(data = x, variables = variaveis_tarv)
})
tarv_pop_all <- do.call(cbind, tarv_pop)
colnames(tarv_pop_all)[which(colnames(tarv_pop_all) == 'EST')] <- c('MTS', 'HSH', 'PID Homem', 'PID Mulher', 'HTG', 'MTG')
tarv_pop_all <- tarv_pop_all[, !duplicated(colnames(tarv_pop_all))]
tarv_pop_all
export(tarv_pop_all, file = paste(file_save, 'TABELA_TEST_TARV_MANICA.xlsx', sep='/'))
5/05
5/95
0.05263158*100
2202 +3+350
26+63
8+33
table(unique_df$TOMA_ARVS, useNA = 'always')
unique_df$TRATAMENTO_ANITIRETROVIRALC <- unique_df$TRATAMENTO_ANITIRETROVIRAL
unique_df$TRATAMENTO_ANITIRETROVIRALC <- unique_df$TRATAMENTO_ANITIRETROVIRAL
unique_df$TRATAMENTO_ANITIRETROVIRALC[unique_df$TRATAMENTO_ANITIRETROVIRAL== 'Sim' & unique_df$TESTE_HIV= 'Sim']<-'1_SIM'
unique_df$TRATAMENTO_ANITIRETROVIRALC[unique_df$TRATAMENTO_ANITIRETROVIRAL== 'Sim' & unique_df$TESTE_HIV== 'Sim']<-'1_SIM'
unique_df$TRATAMENTO_ANITIRETROVIRALC <- unique_df$TRATAMENTO_ANITIRETROVIRAL
unique_df$TRATAMENTO_ANITIRETROVIRALC[unique_df$TRATAMENTO_ANITIRETROVIRAL== 'Sim' & unique_df$TESTE_HIV== 'Sim']<-'1_SIM'
unique_df$TRATAMENTO_ANITIRETROVIRALC <- as.character(unique_df$TRATAMENTO_ANITIRETROVIRAL)
unique_df$TRATAMENTO_ANITIRETROVIRALC[unique_df$TRATAMENTO_ANITIRETROVIRAL== 'Sim' & unique_df$TESTE_HIV== 'Sim']<-'1_SIM'
unique_df$TRATAMENTO_ANITIRETROVIRALC[unique_df$TRATAMENTO_ANITIRETROVIRAL== 'Sim' & unique_df$TESTE_HIV!= 'Sim']<- NA
table(unique_df$TRATAMENTO_ANITIRETROVIRALC)
variaveis_tarv <- c('TESTE_HIV', 'TESTAGEM_ULTIMO_12MESES','RESULTADO_TEST_HIV', 'HIV_CONHECIDO',
'TRATAMENTO_ANITIRETROVIRALC','TOMA_ARVS','TESTE_CV',
'TIPO_RESULTADO_TESTE_CV', 'SUPRESSA_VIRAL')
for(i in 1:length(variaveis_tarv)){
unique_df[, variaveis_tarv[i]] <- factor(unique_df[, variaveis_tarv[i]])
}
list_pop  <- list(unique_df[unique_df$MTS ==1,], unique_df[unique_df$HSH ==1,],
unique_df[unique_df$PID ==1 & unique_df$SEXO_PESSOA == 'masculino',],
unique_df[unique_df$PID ==1 & unique_df$SEXO_PESSOA == 'femenino',],
unique_df[unique_df$HTG ==1,], unique_df[unique_df$MTG ==1,])
tarv_pop <-lapply(list_pop, function(x){
descriptive_kp(data = x, variables = variaveis_tarv)
})
tarv_pop_all <- do.call(cbind, tarv_pop)
colnames(tarv_pop_all)[which(colnames(tarv_pop_all) == 'EST')] <- c('MTS', 'HSH', 'PID Homem', 'PID Mulher', 'HTG', 'MTG')
tarv_pop_all <- tarv_pop_all[, !duplicated(colnames(tarv_pop_all))]
export(tarv_pop_all, file = paste(file_save, 'TABELA_TEST_TARV_MANICA.xlsx', sep='/'))
100000/12
setwd('C:/Users/Rachid/Dropbox/INS/KP MAPPING/SIZE ESTIMATION/DATA')
library(tidyverse)
library(rio)
hotspot_df <- read.csv('Manica_hot_spots.csv', header = TRUE)
# HOTSPOTS ACTIVOS
hotspot_df1 <- hotspot_df[hotspot_df$local_activo == 'sim', ]
unique(hotspot_df1$tipo_local)
by_hots <- function(data, var.x, var.y ){
tabela <- table(data[,var.x], data[,var.y])
col_total <- colSums(tabela)
tabela1 <- rbind(tabela, col_total)
row_total <- rowSums(tabela1)
tabela1 <- cbind(tabela1, row_total)
colnames(tabela1)[dim(tabela1)[2]] <- 'Total'
rownames(tabela1)[dim(tabela1)[1]] <- 'Total'
return(tabela1)
}
hotspot_df1$tipo_local[hotspot_df1$tipo_local == 'Pensao'] <- 'Guesthouse'
manica_tipo_hot <- by_hots(hotspot_df1, "tipo_local", "pop_chave_principal")
manica_tipo_hot
hotspot_df1$tipo_local[hotspot_df1$tipo_local == 'Esquina'] <- 'Rua'
manica_tipo_hot <- by_hots(hotspot_df1, "tipo_local", "pop_chave_principal")
manica_tipo_hot
hotspot_df1$tipo_local[hotspot_df1$tipo_local == 'Bairro'] <- 'Rua'
manica_tipo_hot <- by_hots(hotspot_df1, "tipo_local", "pop_chave_principal")
manica_tipo_hot
loc_sav <- 'C:/Users/Rachid/Dropbox/INS/KP MAPPING/SIZE ESTIMATION/R_TABLES'
export(manica_tipo_hot,
file = paste( loc_sav, 'HOTSPOT_TIPO_MANICA.xlsx', sep = '/'),
rowNames = TRUE)
# TIPO DE HOTSPOT
unique(hotspot_df1$tipo_local)
unique(hotspot_df1$pop_chave_principal)
hotspot_df1$pop_chave_principal <- factor(hotspot_df1$pop_chave_principal,levels = c('mts', 'hsh', 'pid', 'htg', 'mtg'))
manica_tipo_hot <- by_hots(hotspot_df1, "tipo_local", "pop_chave_principal")
export(manica_tipo_hot,
file = paste( loc_sav, 'HOTSPOT_TIPO_MANICA.xlsx', sep = '/'),
rowNames = TRUE)
devtools::install_github("fellstat/shinyrecap")
#######################################################################################################
################################# SIZE ESTIMATION  USING MS- CRC ######################################
#######################################################################################################
library(devtools)
#######################################################################################################
################################# SIZE ESTIMATION  USING MS- CRC ######################################
#######################################################################################################
install.packages("devtools")
library(devtools)
devtools::install_github("fellstat/shinyrecap")
library(shinyrecap)
launchShinyPopSize()
Test
CP_Template
HSH_MC
HSH_MC <- CP_Template
HSH_MP <- CP_Template
HSH_GZ <- CP_Template
MTS_MC <- CP_Template
MTS_MP <- CP_Template
MTS_GZ <- CP_Template
PID_MC <- CP_Template
PID_MP <- CP_Template
PID_GZ <- CP_Template
HTG_MC <- CP_Template
HTG_MP <- CP_Template
HTG_GZ <- CP_Template
MTG_MC <- CP_Template
MTG_MP <- CP_Template
MTG_GZ <- CP_Template
KPTotal$Total <-  c(nrow(KPDB_clean[KPDB_clean$Base_CP == 'p1',]) -
(nrow(KPDB_clean[(KPDB_clean$Base_CP == 'p4' | KPDB_clean$Base_CP == 'p5'),])),
nrow(KPDB_clean[KPDB_clean$Base_CP == 'p2',]) -
(nrow(KPDB_clean[(KPDB_clean$Base_CP == 'p4' | KPDB_clean$Base_CP == 'p6'),])),
nrow(KPDB_clean[KPDB_clean$Base_CP == 'p3',]), nrow(KPDB_clean[KPDB_clean$Base_CP == 'p4',]) -
(nrow(KPDB_clean[ KPDB_clean$Base_CP == 'p7',])), nrow(KPDB_clean[KPDB_clean$Base_CP == 'p5',]),
nrow(KPDB_clean[KPDB_clean$Base_CP == 'p6',]), nrow(KPDB_clean[KPDB_clean$Base_CP == 'p7',])
)
KPTotal
KPTotal <- CP_Template
KPTotal$Total <-  c(nrow(KPDB_clean[KPDB_clean$Base_CP == 'p1',]) -
(nrow(KPDB_clean[(KPDB_clean$Base_CP == 'p4' | KPDB_clean$Base_CP == 'p5'),])),
nrow(KPDB_clean[KPDB_clean$Base_CP == 'p2',]) -
(nrow(KPDB_clean[(KPDB_clean$Base_CP == 'p4' | KPDB_clean$Base_CP == 'p6'),])),
nrow(KPDB_clean[KPDB_clean$Base_CP == 'p3',]), nrow(KPDB_clean[KPDB_clean$Base_CP == 'p4',]) -
(nrow(KPDB_clean[ KPDB_clean$Base_CP == 'p7',])), nrow(KPDB_clean[KPDB_clean$Base_CP == 'p5',]),
nrow(KPDB_clean[KPDB_clean$Base_CP == 'p6',]), nrow(KPDB_clean[KPDB_clean$Base_CP == 'p7',])
)
Total_Unique_Encounters <- sum(KPTotal$Total)
Total_Unique_Encounters
HSH_MC$Total <-  c(nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p1',]) -
(nrow(KPDB_MC[KPDB_MC$HSH == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p5'),])),
nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p2',]) -
(nrow(KPDB_MC[KPDB_MC$HSH == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p6'),])),
nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p3',]), nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p4',]) -
(nrow(KPDB_MC[KPDB_MC$HSH == '1' &  KPDB_MC$Base_CP == 'p7',])), nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p5',]),
nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p6',]), nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p7',])
)
KPDB_clean$PROVINCIA
#KPDB_MC <- subset(KPDB_clean, KPDB_clean$PROVINCIA == '11-Maputo_Cidade')
KPDB_MC <- subset(KPDB_clean, KPDB_clean$PROVINCIA == '06-Manica')
KPTotal$Total <-  c(nrow(KPDB_clean[KPDB_clean$Base_CP == 'p1',]) -
(nrow(KPDB_clean[(KPDB_clean$Base_CP == 'p4' | KPDB_clean$Base_CP == 'p5'),])),
nrow(KPDB_clean[KPDB_clean$Base_CP == 'p2',]) -
(nrow(KPDB_clean[(KPDB_clean$Base_CP == 'p4' | KPDB_clean$Base_CP == 'p6'),])),
nrow(KPDB_clean[KPDB_clean$Base_CP == 'p3',]), nrow(KPDB_clean[KPDB_clean$Base_CP == 'p4',]) -
(nrow(KPDB_clean[ KPDB_clean$Base_CP == 'p7',])), nrow(KPDB_clean[KPDB_clean$Base_CP == 'p5',]),
nrow(KPDB_clean[KPDB_clean$Base_CP == 'p6',]), nrow(KPDB_clean[KPDB_clean$Base_CP == 'p7',])
)
Total_Unique_Encounters <- sum(KPTotal$Total)
HSH_MC$Total <-  c(nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p1',]) -
(nrow(KPDB_MC[KPDB_MC$HSH == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p5'),])),
nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p2',]) -
(nrow(KPDB_MC[KPDB_MC$HSH == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p6'),])),
nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p3',]), nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p4',]) -
(nrow(KPDB_MC[KPDB_MC$HSH == '1' &  KPDB_MC$Base_CP == 'p7',])), nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p5',]),
nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p6',]), nrow(KPDB_MC[KPDB_MC$HSH == '1' & KPDB_MC$Base_CP == 'p7',])
)
MTS_MC$Total <-  c(nrow(KPDB_MC[KPDB_MC$MTS == '1' & KPDB_MC$Base_CP == 'p1',]) -
(nrow(KPDB_MC[KPDB_MC$MTS == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p5'),])),
nrow(KPDB_MC[KPDB_MC$MTS == '1' & KPDB_MC$Base_CP == 'p2',]) -
(nrow(KPDB_MC[KPDB_MC$MTS == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p6'),])),
nrow(KPDB_MC[KPDB_MC$MTS == '1' & KPDB_MC$Base_CP == 'p3',]), nrow(KPDB_MC[KPDB_MC$MTS == '1' & KPDB_MC$Base_CP == 'p4',]) -
(nrow(KPDB_MC[KPDB_MC$MTS == '1' &  KPDB_MC$Base_CP == 'p7',])), nrow(KPDB_MC[KPDB_MC$MTS == '1' & KPDB_MC$Base_CP == 'p5',]),
nrow(KPDB_MC[KPDB_MC$MTS == '1' & KPDB_MC$Base_CP == 'p6',]), nrow(KPDB_MC[KPDB_MC$MTS == '1' & KPDB_MC$Base_CP == 'p7',])
)
PID_MC$Total <-  c(nrow(KPDB_MC[KPDB_MC$PID == '1' & KPDB_MC$Base_CP == 'p1',]) -
(nrow(KPDB_MC[KPDB_MC$PID == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p5'),])),
nrow(KPDB_MC[KPDB_MC$PID == '1' & KPDB_MC$Base_CP == 'p2',]) -
(nrow(KPDB_MC[KPDB_MC$PID == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p6'),])),
nrow(KPDB_MC[KPDB_MC$PID == '1' & KPDB_MC$Base_CP == 'p3',]), nrow(KPDB_MC[KPDB_MC$PID == '1' & KPDB_MC$Base_CP == 'p4',]) -
(nrow(KPDB_MC[KPDB_MC$PID == '1' &  KPDB_MC$Base_CP == 'p7',])), nrow(KPDB_MC[KPDB_MC$PID == '1' & KPDB_MC$Base_CP == 'p5',]),
nrow(KPDB_MC[KPDB_MC$PID == '1' & KPDB_MC$Base_CP == 'p6',]), nrow(KPDB_MC[KPDB_MC$PID == '1' & KPDB_MC$Base_CP == 'p7',])
)
HTG_MC$Total <-  c(nrow(KPDB_MC[KPDB_MC$HTG == '1' & KPDB_MC$Base_CP == 'p1',]) -
(nrow(KPDB_MC[KPDB_MC$HTG == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p5'),])),
nrow(KPDB_MC[KPDB_MC$HTG == '1' & KPDB_MC$Base_CP == 'p2',]) -
(nrow(KPDB_MC[KPDB_MC$HTG == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p6'),])),
nrow(KPDB_MC[KPDB_MC$HTG == '1' & KPDB_MC$Base_CP == 'p3',]), nrow(KPDB_MC[KPDB_MC$HTG == '1' & KPDB_MC$Base_CP == 'p4',]) -
(nrow(KPDB_MC[KPDB_MC$HTG == '1' &  KPDB_MC$Base_CP == 'p7',])), nrow(KPDB_MC[KPDB_MC$HTG == '1' & KPDB_MC$Base_CP == 'p5',]),
nrow(KPDB_MC[KPDB_MC$HTG == '1' & KPDB_MC$Base_CP == 'p6',]), nrow(KPDB_MC[KPDB_MC$HTG == '1' & KPDB_MC$Base_CP == 'p7',])
)
MTG_MC$Total <-  c(nrow(KPDB_MC[KPDB_MC$MTG == '1' & KPDB_MC$Base_CP == 'p1',]) -
(nrow(KPDB_MC[KPDB_MC$MTG == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p5'),])),
nrow(KPDB_MC[KPDB_MC$MTG == '1' & KPDB_MC$Base_CP == 'p2',]) -
(nrow(KPDB_MC[KPDB_MC$MTG == '1' & (KPDB_MC$Base_CP == 'p4' | KPDB_MC$Base_CP == 'p6'),])),
nrow(KPDB_MC[KPDB_MC$MTG == '1' & KPDB_MC$Base_CP == 'p3',]), nrow(KPDB_MC[KPDB_MC$MTG == '1' & KPDB_MC$Base_CP == 'p4',]) -
(nrow(KPDB_MC[KPDB_MC$MTG == '1' &  KPDB_MC$Base_CP == 'p7',])), nrow(KPDB_MC[KPDB_MC$MTG == '1' & KPDB_MC$Base_CP == 'p5',]),
nrow(KPDB_MC[KPDB_MC$MTG == '1' & KPDB_MC$Base_CP == 'p6',]), nrow(KPDB_MC[KPDB_MC$MTG == '1' & KPDB_MC$Base_CP == 'p7',])
)
path<-"C:/Users/Rachid/Dropbox/INS/KP MAPPING/SIZE ESTIMATION/DATA/CAPTURE_PATTERN"
write.csv(HSH_MC, file=paste(path,"HSH_MC.csv",sep='/'), row.names = FALSE )
write.csv(MTS_MC, "C:/Users/Rachid/Dropbox/INS/KP MAPPING/SIZE ESTIMATION/DATA/CAPTURE_PATTERN/MTS_MC.csv", row.names = FALSE )
write.csv(PID_MC, "C:/Users/Rachid/Dropbox/INS/KP MAPPING/SIZE ESTIMATION/DATA/CAPTURE_PATTERN/PID_MC.csv", row.names = FALSE )
write.csv(HTG_MC, "C:/Users/Rachid/Dropbox/INS/KP MAPPING/SIZE ESTIMATION/DATA/CAPTURE_PATTERN/HTG_MC.csv", row.names = FALSE )
write.csv(MTG_MC, "C:/Users/Rachid/Dropbox/INS/KP MAPPING/SIZE ESTIMATION/DATA/CAPTURE_PATTERN/MTG_MC.csv", row.names = FALSE )
launchShinyPopSize()
library(shinyrecap)
launchShinyPopSize()
HTG_GZ
HTG_MC
MTG_MC
CP_Template
30*64
View(KPDB_clean)
table(KPDB_clean$CAPTURA, useNA = 'always')
pattern1 <- KPDB_clean |>
filter(ACEITA_CONSENTIMENTO == 'sim' & ABORDADO == 'nao') |>
filter(CAPTURA == 'captura1' & (RECEBEU_OBJECTO_5_14_DIAS %in% c('nao', NA)) & (RECEBEU_OBJECTO_14_28_DIAS %in% c('nao', NA) ))
View(KPDB_clean)
pattern2 <- KPDB_clean |>
filter(ACEITA_CONSENTIMENTO == 'sim' & ABORDADO == 'nao') |>
filter(CAPTURA == 'captura2' & (RECEBEU_OBJECTO_5_14_DIAS == 'sim') & (RECEBEU_OBJECTO_14_28_DIAS %in% c('nao', NA) ))
pattern3 <- KPDB_clean |>
filter(ACEITA_CONSENTIMENTO == 'sim' & ABORDADO == 'nao') |>
filter(CAPTURA == '3' & (RECEBEU_OBJECTO_5_14_DIAS %in% c('nao', NA)) & (RECEBEU_OBJECTO_14_28_DIAS == 'sim' ))
pattern4 <- KPDB_clean |>
filter(ACEITA_CONSENTIMENTO == 'sim' & ABORDADO == 'nao') |>
filter(CAPTURA == 'captura1' & (RECEBEU_OBJECTO_5_14_DIAS == 'sim') & (RECEBEU_OBJECTO_14_28_DIAS %in% c('nao', NA) ))
pattern5 <- KPDB_clean |>
filter(ACEITA_CONSENTIMENTO == 'sim' & ABORDADO == 'nao') |>
filter(CAPTURA == 'captura1' & (RECEBEU_OBJECTO_5_14_DIAS %in% c('nao', NA)) & (RECEBEU_OBJECTO_14_28_DIAS== 'sim' ))
pattern6 <- KPDB_clean |>
filter(ACEITA_CONSENTIMENTO == 'sim' & ABORDADO == 'nao') |>
filter(CAPTURA == 'captura2' & (RECEBEU_OBJECTO_5_14_DIAS %in% c('nao', NA)) & (RECEBEU_OBJECTO_14_28_DIAS== 'sim' ))
pattern7 <- KPDB_clean |>
filter(ACEITA_CONSENTIMENTO == 'sim' & ABORDADO == 'nao') |>
filter(CAPTURA == 'captura1' & (RECEBEU_OBJECTO_5_14_DIAS == 'sim') & (RECEBEU_OBJECTO_14_28_DIAS== 'sim' ))
pattern6 <- KPDB_clean |>
filter(ACEITA_CONSENTIMENTO == 'sim' & ABORDADO == 'nao') |>
filter(CAPTURA == 'captura2' & (RECEBEU_OBJECTO_5_14_DIAS %in% c('nao', NA)) & (RECEBEU_OBJECTO_14_28_DIAS== 'sim' ))
pattern7 <- KPDB_clean |>
filter(ACEITA_CONSENTIMENTO == 'sim' & ABORDADO == 'nao') |>
filter(CAPTURA == 'captura1' & (RECEBEU_OBJECTO_5_14_DIAS == 'sim') & (RECEBEU_OBJECTO_14_28_DIAS== 'sim' ))
nrow(pattern1[pattern1$MTS ==1, ])
MTS_MC
nrow(pattern1[pattern1$MTS ==1, ])
View(pattern1)
pattern1$MTS
nrow(pattern1[pattern1$MTS =='1', ])
nrow(pattern1)
library(bookdown)
library(blogdown)
blogdown::new_post("my new post", ext=".Rmd")
setwd('C:/Users/Rachi/Dropbox/personalwebsite/RachidMuleia.github.io')
setwd('C:/Users/Rachid/Dropbox/personalwebsite/RachidMuleia.github.io')
blogdown::new_post("my new post", ext=".Rmd")
blogdown::new_post("Como manipular ficheiros pdf", ext=".Rmd")
library(pdftools)
# extraír algumas páginas
pdf_subset(input = 'https://rachidmuleia.com/project/2023-03-14-programacao-estatistica/Aula_Estruturas_Dados.pdf', # nome o ficheiro onde faremos a extração
output = 'aulas_primeiras_paginas.pdf', # nome do ficheiro com as paginas extraídas
pages = c(1,10,12) # páginas a extrair
)
library(pdftools)
# combinar varios ficheiros pdf
pdf_combine(input = c('Aula_Estruturas_Dados.pdf', 'Importacao_Dados.pdf'), #vector com os nomes dos ficheiros a combinar
output = 'ficheiro_combinado. pdf' # nome do ficheiro com os pdfs combinados
)
library(pdftools)
# separar ficheiro pdf em vários ficheiros pdf
pdf_split(input = 'https://rachidmuleia.com/project/2023-03-14-programacao-estatistica/Aula_Estruturas_Dados.pdf')
library(pdftools)
# combinar varios ficheiros pdf
pdf_combine(input = c('https://rachidmuleia.com/project/2023-03-14-programacao-estatistica/Aula_Estruturas_Dados.pdf', 'https://rachidmuleia.com/project/2023-03-14-programacao-estatistica/Importacao_Dados.pdf'), #vector com os nomes dos ficheiros a combinar
output = 'ficheiro_combinado. pdf' # nome do ficheiro com os pdfs combinados
)
blogdown:::preview_site()
